generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userChats   UserChat[]
  messages    Message[]
  MessageSeen MessageSeen[]

  @@map("users")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Chat {
  id        String   @id @default(cuid())
  isGroup   Boolean  @default(false)
  name      String? // for group chats
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastMessageId String  @unique
  lastMessage   Message @relation(fields: [lastMessageId], references: [id])

  userChats UserChat[]
  messages  Message[]  @relation("belongsTo")

  @@map("chats")
}

model UserChat {
  id       String    @id @default(cuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  chatId   String?
  Chat     Chat?     @relation(fields: [chatId], references: [id])
  muted    Boolean   @default(false)
  lastRead DateTime? // last seen message time

  @@unique([userId, chatId])
  @@map("user_chats")
}

model Message {
  id            String        @id @default(cuid())
  senderId      String
  sender        User          @relation(fields: [senderId], references: [id])
  chatId        String
  chat          Chat          @relation(name: "belongsTo", fields: [chatId], references: [id])
  content       String        @db.VarChar(1000)
  createdAt     DateTime      @default(now())
  seenBy        MessageSeen[]
  lastMessageOf Chat?

  @@map("messages")
}

model MessageSeen {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  seenAt    DateTime @default(now())

  @@unique([userId, messageId])

  @@map("message_seen")
}
